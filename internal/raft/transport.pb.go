// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v3.19.6
// source: internal/raft/transport.proto

package raft

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// RaftEnvelope wraps a serialized etcd raftpb.Message plus shard routing info.
// We avoid importing the etcd raft .proto directly to keep generation simple and
// stable against upstream changes. The payload is a marshaled raftpb.Message.
type RaftEnvelope struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ShardId       string                 `protobuf:"bytes,1,opt,name=shard_id,json=shardId,proto3" json:"shard_id,omitempty"`             // logical shard identifier (matches ShardRaftNode.shardID)
	RaftMessage   []byte                 `protobuf:"bytes,2,opt,name=raft_message,json=raftMessage,proto3" json:"raft_message,omitempty"` // marshaled go.etcd.io/etcd/raft/v3/raftpb.Message
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RaftEnvelope) Reset() {
	*x = RaftEnvelope{}
	mi := &file_internal_raft_transport_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RaftEnvelope) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftEnvelope) ProtoMessage() {}

func (x *RaftEnvelope) ProtoReflect() protoreflect.Message {
	mi := &file_internal_raft_transport_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftEnvelope.ProtoReflect.Descriptor instead.
func (*RaftEnvelope) Descriptor() ([]byte, []int) {
	return file_internal_raft_transport_proto_rawDescGZIP(), []int{0}
}

func (x *RaftEnvelope) GetShardId() string {
	if x != nil {
		return x.ShardId
	}
	return ""
}

func (x *RaftEnvelope) GetRaftMessage() []byte {
	if x != nil {
		return x.RaftMessage
	}
	return nil
}

var File_internal_raft_transport_proto protoreflect.FileDescriptor

const file_internal_raft_transport_proto_rawDesc = "" +
	"\n" +
	"\x1dinternal/raft/transport.proto\x12\rrafttransport\"L\n" +
	"\fRaftEnvelope\x12\x19\n" +
	"\bshard_id\x18\x01 \x01(\tR\ashardId\x12!\n" +
	"\fraft_message\x18\x02 \x01(\fR\vraftMessage2^\n" +
	"\rRaftTransport\x12M\n" +
	"\rMessageStream\x12\x1b.rafttransport.RaftEnvelope\x1a\x1b.rafttransport.RaftEnvelope(\x010\x01B0Z.github.com/sevenDatabase/SevenDB/internal/raftb\x06proto3"

var (
	file_internal_raft_transport_proto_rawDescOnce sync.Once
	file_internal_raft_transport_proto_rawDescData []byte
)

func file_internal_raft_transport_proto_rawDescGZIP() []byte {
	file_internal_raft_transport_proto_rawDescOnce.Do(func() {
		file_internal_raft_transport_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_internal_raft_transport_proto_rawDesc), len(file_internal_raft_transport_proto_rawDesc)))
	})
	return file_internal_raft_transport_proto_rawDescData
}

var file_internal_raft_transport_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_internal_raft_transport_proto_goTypes = []any{
	(*RaftEnvelope)(nil), // 0: rafttransport.RaftEnvelope
}
var file_internal_raft_transport_proto_depIdxs = []int32{
	0, // 0: rafttransport.RaftTransport.MessageStream:input_type -> rafttransport.RaftEnvelope
	0, // 1: rafttransport.RaftTransport.MessageStream:output_type -> rafttransport.RaftEnvelope
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_internal_raft_transport_proto_init() }
func file_internal_raft_transport_proto_init() {
	if File_internal_raft_transport_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_internal_raft_transport_proto_rawDesc), len(file_internal_raft_transport_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_internal_raft_transport_proto_goTypes,
		DependencyIndexes: file_internal_raft_transport_proto_depIdxs,
		MessageInfos:      file_internal_raft_transport_proto_msgTypes,
	}.Build()
	File_internal_raft_transport_proto = out.File
	file_internal_raft_transport_proto_goTypes = nil
	file_internal_raft_transport_proto_depIdxs = nil
}
